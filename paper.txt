Introduction:
A Sorting network is a formal representation of a sorting algorithm that for any inputs it generates
monotically increasing outputs. A sorting network is formed by n channels each of them carrying one input,
which are connected pairwise by comparators. A comparator compares the inputs from it's 2 channels and 
outputs them sorted to this same 2 channels. A comparator network is a sorting network if for any 
input sequence the output is always the sorted input sequence.

Comparator Network representation: The comparator network is composed by the following items:
	- Comparator array
	- Output array
	- 0 positions array
	- 1 positions array


Generate implementation: The generate algorithm consists in for each net in the set clone it with a new comparator in all possible postions


Prune implementation:


Subsume implementation:


Skip permutations:


Dual outputs reduces the sets a lot

ForeachBatchExample -> https://github.com/dotnet/spark/blob/a0cc7dc979abb5466a2829591726a1c54454ada7/src/csharp/Microsoft.Spark.E2ETest/IpcTests/Sql/Streaming/DataStreamWriterTests.cs

Heuristics:
	1. Fewer outputs better. 
		Results -> For 9 inputs I find the net with population of 25 that is 30 times smaller than the biggest set without heuristic. 
				   For 10 inputs I find the net with population of 350 that is 24 times smaller than the biggest set without heuristic. 
	2. Try only change one input n^2 complexity and keep Fewer outputs.
		Population of 50.000 -> Finds state of art best known for 15 and 16 in around 7 hours, also with 10k

If we check all the permutations after prune we have always 1 net. Only nets that we don't check survive?

Tried Heuristic of greedy best first paper (bad zeroes), seems to have worse results than keeping nets with less outputs.


Heuristics table:

	9 inputs-> Smallest population that yield result: 20
	10 inputs-> Smallest population that yield result: 350
	11 inputs-> Smallest population that yield result: 38
	12 inputs-> Smallest population that yield result: 59

Sorting network 9 input found by pruning everything: (0,1) (7,8) (5,6) (3,4), (5,7) (0,3) (3,7) (6,8) (0,5) (1,4) |(1,6) (3,5) (2,7) (1,2) |(1,3) (4,8) (4,6) (0,1) |(2,4) (6,7) (2,5) (4,6) (2,3) (4,5) (7,8)
Sorting network 9 inñut found by pruning method: (0,1) (0,8) (6,7) (5,6) (7,8) (3,4) (1,6) (2,3) (4,7) (1,3) (6,7) (3,8) (1,4) (2,5) (0,5) (3,6) (4,5) (5,6) (0,2) (1,2) (2,4) (3,4) (4,5) (7,8) (6,7) 